@model List<PhiaProject>
@{
    ViewData["Title"] = "Projects";
}
<div class="page-title-box d-flex align-items-center justify-content-between">
    <div class="page-title-right">
        <ol class="breadcrumb m-0">
            <li class="breadcrumb-item"><a asp-controller="Project" asp-action="Index">Project</a></li>
            <li class="breadcrumb-item active">All projects</li>
        </ol>
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header">
                
                <div class="row">
                    <div class="col-sm-8">
                        <div class="search-box me-2 d-inline-block">
                            <div class="position-relative">
                                <h4 class="card-title">Projects</h4>
                                <p class="card-title-desc">List of all active projects</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="text-sm-end">
                            <a asp-controller="Project" asp-action="Add" class="btn btn-primary btn-rounded waves-effect waves-light me-2"><i class="mdi mdi-plus me-1"></i> Configure New Project</a>
                        </div>
                    </div><!-- end col-->
                </div>
            </div><!-- end card header -->
            <div class="card-body">
                <div id="app_list"></div>
            </div>
            <!-- end card body -->
        </div>
        <!-- end card -->
    </div>
    <!-- end col -->
</div>

<div class="row">
    @foreach (var item in Model)
    {
        <div class="col-xl-3 col-sm-6">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        @if(string.IsNullOrEmpty(item.ProjectLogoPath)){
                            <div class="avatar-md">
                                <div class="avatar-title bg-soft-primary text-primary h1 m-0 rounded-circle">
                                    <i class="bx bxs-user-circle"></i>
                                </div>
                            </div>
                        }else{
                            <div>
                                <img src="@item.ProjectLogoPath" alt="" class="avatar-md rounded-circle img-thumbnail">
                            </div>
                        }
                        <div class="flex-1 ms-3">
                            <h5 class="font-size-16 mb-1">@item.ProjectAbbrev</h5>
                            <p class="text-muted mb-0" style="display: -webkit-box; -webkit-line-clamp: 2;-webkit-box-orient: vertical;overflow: hidden;min-height:46px;">@item.ProjectName</p>
                        </div>
                    </div>
                    <p class="mt-3 text-muted" style="display: -webkit-box; -webkit-line-clamp: 3;-webkit-box-orient: vertical;overflow: hidden;min-height:68px;">@item.ProjectDescription</p>
                    <div class="pt-1">
                        <a href="Project/Edit/@item.Id" class="btn btn-soft-primary btn-sm text-truncate"><i class="bx bx-pencil me-1"></i> Edit</a>
                        @if(item.Active != 1){
                            <a href="#" class="btn btn-light btn-sm text-truncate ms-2"><i class="bx bx-link-alt me-1"></i> Activate</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>
@section Styles{
    <link rel="stylesheet" href="~/public/assets/libs/gridjs/theme/mermaid.min.css">
}

@section Scripts{
    <script src="~/public/assets/libs/gridjs/gridjs.umd.js"></script>
    @* <script>
        const grid = new gridjs.Grid({
            columns: ['project name', 'project abbrev', 'project start date', 'active',
                ,{
                    name: 'Action',
                    formatter: (_, row) =>
                            gridjs.html(`<a href="Project/Edit/${row.cells[4].data}" class="btn btn-sm btn-info">Edit</a>`)
                    
                    }
            ],  
            pagination: {
                enabled: true,
                limit: 10,
                server: {
                    url: (prev, page, limit) => {
                        if(prev.includes("?"))
                            return `${prev}&limit=${limit}&offset=${page * limit}`;
                        else
                            return `${prev}?limit=${limit}&offset=${page * limit}`
                    } 
                }
            },
            sort: {
                multiColumn: false,
                server: {
                    url: (prev, columns) => {
                        if (!columns.length) return prev;                    
                        const col = columns[0];
                        const dir = col.direction === 1 ? 'asc' : 'desc';
                        let colName = ['projectName', 'projectAbbrev', 'projectStartDate', 'active', 'id'][col.index];
                        if(prev.includes("?"))
                            return `${prev}&order=${colName}&direction=${dir}`;
                        else
                            return `${prev}?order=${colName}&direction=${dir}`;
                    }
                }
            },
            search: {
                server: {
                    url: (prev, keyword) => `${prev}?search=${keyword}`
                }
            },       
            resizable: true,
            server: {
                url: '/Project/GetActiveProjects',
                then: data => data.records.map(card => [card.projectName, card.projectAbbrev, card.projectStartDate, card.active, card.id])
            } 
        }).render(document.getElementById('project_list'));
    </script> *@
}